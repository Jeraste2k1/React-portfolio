const express = require("express");
const multer = require("multer");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");
const path = require("path");
const fs = require("fs");

const app = express();
app.use(cors());
app.use(express.json()); // Parser le JSON

const DATA_FILE = "data.json";
const SECRET_KEY = "Mon-secret-key"; // üîí √Ä garder confidentiel
const ADMIN_FILE = "admin.json"; 

// üìå V√©rifier si l'admin existe, sinon en cr√©er un
if (!fs.existsSync(ADMIN_FILE)) {
  const hashedPassword = bcrypt.hashSync("admin@gmail", 10); // Mot de passe par d√©faut (√† changer apr√®s)
  fs.writeFileSync(ADMIN_FILE, JSON.stringify({ email: "admin@gmail.com", password: hashedPassword }));
}

// üìå Charger l'admin
const loadAdmin = () => JSON.parse(fs.readFileSync(ADMIN_FILE, "utf-8"));

// üìå Route de connexion (Login)
app.post("/login", async (req, res) => {
  console.log("Requ√™te re√ßue pour /login");
  console.log("M√©thode :", req.method); // Affiche la m√©thode HTTP (doit √™tre POST)
  
  const { email, password } = req.body;
  
  // V√©rification de la pr√©sence des donn√©es
  if (!email || !password) {
    return res.status(400).json({ message: "Email et mot de passe sont requis" });
  }

  console.log("Email:", email);
  console.log("Mot de passe:", password);

  const admin = loadAdmin();

  if (email !== admin.email || !await bcrypt.compare(password, admin.password)) {
    return res.status(401).json({ message: "Email ou mot de passe incorrect" });
  }
  
  const token = jwt.sign({ email: admin.email }, SECRET_KEY, { expiresIn: "1h" });
  res.json({ token }); // V√©rifie que le token est bien dans la r√©ponse
});


// üìå Middleware pour prot√©ger les routes
const verifyToken = (req, res, next) => {
  const token = req.headers["authorization"];
  if (!token) return res.status(403).json({ message: "Acc√®s refus√©" });

  jwt.verify(token.split(" ")[1], SECRET_KEY, (err, decoded) => {
    if (err) return res.status(401).json({ message: "Token invalide ou expir√©" });
    req.user = decoded;
    next();
  });
};

// üìå Route prot√©g√©e : acc√®s √† l'admin uniquement si connect√©
app.get("/admin", verifyToken, (req, res) => {
  res.json({ message: "Bienvenue dans l'admin !" });
});

 // üìå Route pour changer le mot de passe
app.post("/change-password", verifyToken, async (req, res) => {
  const { newPassword } = req.body;
  const admin = loadAdmin();

  // V√©rifier que le nouveau mot de passe est valide
  if (!newPassword || newPassword.length < 6) {
    return res.status(400).json({ message: "Le mot de passe doit contenir au moins 6 caract√®res" });
  }

  // Mettre √† jour le mot de passe
  admin.password = await bcrypt.hash(newPassword, 10);
  fs.writeFileSync(ADMIN_FILE, JSON.stringify(admin));
  res.json({ message: "Mot de passe mis √† jour avec succ√®s" });
});


// üìå Route pour changer l'email de l'admin
app.post("/change-email", verifyToken, async (req, res) => {
  const { newEmail, password } = req.body;
  const admin = loadAdmin();

  // V√©rifier si le mot de passe est correct
  if (!await bcrypt.compare(password, admin.password)) {
    return res.status(400).json({ message: "Mot de passe incorrect" });
  }

  // Mettre √† jour l'email
  admin.email = newEmail;
  fs.writeFileSync(ADMIN_FILE, JSON.stringify(admin));
  res.json({ message: "Email mis √† jour avec succ√®s" });
});


// üìå Charger les donn√©es depuis le fichier JSON
const loadData = () => {
  if (!fs.existsSync(DATA_FILE)) fs.writeFileSync(DATA_FILE, JSON.stringify({ categories: [], files: [] }));
  return JSON.parse(fs.readFileSync(DATA_FILE, "utf-8"));
};

// üìå Sauvegarder les donn√©es dans le fichier JSON
const saveData = (data) => {
  fs.writeFileSync(DATA_FILE, JSON.stringify(data, null, 2));
};

// üìå Multer - Stockage des fichiers upload√©s
const storage = multer.diskStorage({
  destination: "uploads/",
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname)); // Renommer avec timestamp
  },
});
const upload = multer({ storage });

// üìå Route pour cr√©er une cat√©gorie
app.post("/categories", (req, res) => {
  const data = loadData();
  const newCategory = { name: req.body.name };
  data.categories.push(newCategory);
  saveData(data);
  res.status(201).json(newCategory);
});

// üìå Route pour r√©cup√©rer toutes les cat√©gories
app.get("/categories", (req, res) => {
  const data = loadData();
  res.json(data.categories);
});


// üìå Route pour uploader un fichier dans une cat√©gorie
app.post("/upload", upload.single("file"), (req, res) => {
  const data = loadData();
  const newFile = { filename: req.file.filename, category: req.body.category, published: false };
  data.files.push(newFile);
  saveData(data);
  res.status(201).json(newFile);
});

// üìå Route pour r√©cup√©rer les fichiers par cat√©gorie
app.get("/files/:category", (req, res) => {
  const data = loadData();
  const files = data.files.filter(file => file.category === req.params.category);
  res.json(files);
});
// üìå Route pour r√©cup√©rer tous les fichiers
app.get("/files", (req, res) => {
  const data = loadData();
  res.json(data.files); // Retourne tous les fichiers enregistr√©s
});


// üìå Route pour publier/d√©publier un fichier
app.put("/files/publish/:filename", (req, res) => {
  const data = loadData();
  const file = data.files.find(file => file.filename === req.params.filename);
  if (file) {
    file.published = !file.published; // Bascule l'√©tat de publication
    saveData(data);
    res.json({ message: "Statut mis √† jour", file });
  } else {
    res.status(404).json({ error: "Fichier non trouv√©" });
  }
});

// üìå Route pour supprimer un fichier
app.delete("/files/:filename", (req, res) => {
  const data = loadData();
  const fileIndex = data.files.findIndex(file => file.filename === req.params.filename);
  if (fileIndex !== -1) {
    const filePath = path.join("uploads", data.files[fileIndex].filename);
    if (fs.existsSync(filePath)) fs.unlinkSync(filePath); // Supprime le fichier physique
    data.files.splice(fileIndex, 1);
    saveData(data);
    res.json({ message: "Fichier supprim√©" });
  } else {
    res.status(404).json({ error: "Fichier non trouv√©" });
  }
});

// üìå Route pour supprimer une cat√©gorie
app.delete("/categories/:name", (req, res) => {
  const data = loadData();
  const categoryName = req.params.name;
  // Chercher la cat√©gorie √† supprimer
  const categoryIndex = data.categories.findIndex(cat => cat.name === categoryName);
  if (categoryIndex === -1) {
    return res.status(404).json({ error: "Cat√©gorie non trouv√©e" });
  }
  // Supprimer la cat√©gorie
  data.categories.splice(categoryIndex, 1);
  // Supprimer √©galement tous les fichiers associ√©s √† cette cat√©gorie
  data.files = data.files.filter(file => file.category !== categoryName);
  saveData(data);
  res.json({ message: "Cat√©gorie supprim√©e avec succ√®s" });
});

// üìå Servir les fichiers statiques
app.use("/uploads", express.static("uploads"));

// üìå Lancer le serveur
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`‚úÖ Serveur d√©marr√© sur le port ${PORT}`);
});